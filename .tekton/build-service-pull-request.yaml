apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  annotations:
    build.appstudio.openshift.io/repo: https://github.com/konflux-ci/build-service?rev={{revision}}
    build.appstudio.redhat.com/commit_sha: '{{revision}}'
    build.appstudio.redhat.com/pull_request_number: '{{pull_request_number}}'
    build.appstudio.redhat.com/target_branch: '{{target_branch}}'
    pipelinesascode.tekton.dev/max-keep-runs: '3'
    pipelinesascode.tekton.dev/on-cel-expression: event == "pull_request" && target_branch == "main"
  creationTimestamp:
  labels:
    appstudio.openshift.io/application: build-service
    appstudio.openshift.io/component: build-service
    pipelines.appstudio.openshift.io/type: build
  name: build-service-on-pull-request
  namespace: rhtap-build-tenant
spec:
  params:
  - name: git-url
    value: '{{source_url}}'
  - name: revision
    value: '{{revision}}'
  - name: output-image
    value: quay.io/redhat-user-workloads/rhtap-build-tenant/build-service/build-service:on-pr-{{revision}}
  - name: image-expires-after
    value: 5d
  - name: dockerfile
    value: Dockerfile
  - name: path-context
    value: .
  - name: hermetic
    value: "true"
  - name: prefetch-input
    value: '{"type": "gomod", "path": "."}'
  pipelineSpec:
    description: |
      This pipeline is ideal for building container images from a Containerfile while maintaining trust after pipeline customization.

      _Uses `buildah` to create a container image leveraging [trusted artifacts](https://konflux-ci.dev/architecture/ADR/0036-trusted-artifacts.html). It also optionally creates a source image and runs some build-time tests. Information is shared between tasks using OCI artifacts instead of PVCs. EC will pass the [`trusted_task.trusted`](https://enterprisecontract.dev/docs/ec-policies/release_policy.html#trusted_task__trusted) policy as long as all data used to build the artifact is generated from trusted tasks.
      This pipeline is pushed as a Tekton bundle to [quay.io](https://quay.io/repository/konflux-ci/tekton-catalog/pipeline-docker-build-oci-ta?tab=tags)_
    params:
    - description: Source Repository URL
      name: git-url
      type: string
    - default: ''
      description: Revision of the Source Repository
      name: revision
      type: string
    - description: Fully Qualified Output Image
      name: output-image
      type: string
    - default: .
      description: Path to the source code of an application's component from where to build image.
      name: path-context
      type: string
    - default: Dockerfile
      description: Path to the Dockerfile inside the context specified by parameter path-context
      name: dockerfile
      type: string
    - default: 'false'
      description: Force rebuild image
      name: rebuild
      type: string
    - default: 'false'
      description: Skip checks against built image
      name: skip-checks
      type: string
    - default: 'false'
      description: Execute the build with network isolation
      name: hermetic
      type: string
    - default: ''
      description: Build dependencies to be prefetched by Cachi2
      name: prefetch-input
      type: string
    - default: ''
      description: Image tag expiration time, time values could be something like 1h, 2d, 3w for hours, days, and weeks, respectively.
      name: image-expires-after
    - default: 'false'
      description: Build a source image.
      name: build-source-image
      type: string
    - default: 'false'
      description: Add built image into an OCI image index
      name: build-image-index
      type: string
    - default: []
      description: Array of --build-arg values ("arg=value" strings) for buildah
      name: build-args
      type: array
    - default: ''
      description: Path to a file with build arguments for buildah, see https://www.mankier.com/1/buildah-build#--build-arg-file
      name: build-args-file
      type: string

    tasks:
    - name: test
      taskSpec:
        stepTemplate:
          computeResources: {}
          volumeMounts:
          - mountPath: /var/workdir
            name: workdir
        steps:
        - image: busybox:latest
          name: test
          script: |
            set -ex
            cat /etc/hosts
          securityContext:
            runAsUser: 0
          workingDir: /var/workdir
        volumes:
        - emptyDir: {}
          name: workdir

    workspaces:
    - name: git-auth
      optional: true
    - name: netrc
      optional: true
  taskRunTemplate:
    serviceAccountName: build-pipeline-build-service
  workspaces:
  - name: git-auth
    secret:
      secretName: '{{ git_auth_secret }}'
status: {}
